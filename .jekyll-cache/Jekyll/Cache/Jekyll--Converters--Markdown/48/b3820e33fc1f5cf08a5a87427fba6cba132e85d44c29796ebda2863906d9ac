I"(<p>在PC上交叉编译好的基于ARM架构的可执行文件可以通过串口传输，FTP服务，NFS挂载等方式放到目标ARM板上。其中NFS挂载应该是最方便的，文件一直存放在PC上，只不过目标ARM板可以通过这种方式把PC的文件系统借为己用。</p>

<p>以前用FriendlyARM 2440开发板无论怎么折腾都无法成功地挂载，错误信息是server denied。后来发现是因为没有开发板的root权限（板子买来的时候root密码已经被人改过），于是重新用SD卡烧写了系统，这样root用户密码初始化为空。</p>

<hr />
<h2 id="sd卡烧写linux系统">SD卡烧写linux系统</h2>
<p>把Bootloader(<code class="language-plaintext highlighter-rouge">Superboot2440.bin</code>)，Linux内核 (<code class="language-plaintext highlighter-rouge">ZImage_X35</code>)，文件系统映像(<code class="language-plaintext highlighter-rouge">rootfs_qtopia_qt4.img</code>)和烧写配置文件(<code class="language-plaintext highlighter-rouge">FriendlyARM.ini</code>)放入到images目录下。</p>

<ul>
  <li>Step1:把格式化为FAT的SD卡插入电脑，把images目录全部拷到/目录下。打开FriendlyARM.ini文件修改成以下：</li>
</ul>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc">    <span class="cp">#The configuration file to select and control the burn system
</span>    <span class="n">USBMode</span> <span class="o">=</span> <span class="n">No</span>
    <span class="n">Action</span> <span class="o">=</span> <span class="n">Install</span>
    <span class="n">OS</span> <span class="o">=</span> <span class="n">Linux</span>                      <span class="err">#烧写</span><span class="n">Linux</span><span class="err">系统</span>
    <span class="n">VerifyNandWrite</span> <span class="o">=</span> <span class="n">Yes</span>
    <span class="n">LowFormat</span> <span class="o">=</span> <span class="n">No</span>
    <span class="n">Status</span> <span class="n">Type</span> <span class="o">=</span> <span class="n">Beeper</span><span class="o">|</span> <span class="n">LED</span>
    <span class="cp"># Linux part
</span>    <span class="n">Linux</span><span class="k">-</span><span class="n">BootLoader</span> <span class="o">=</span> <span class="n">Superboot2440</span><span class="p">.</span><span class="n">bin</span>
    <span class="n">Linux</span><span class="k">-</span><span class="n">Kernel</span> <span class="o">=</span> <span class="n">Linux</span><span class="o">/</span><span class="n">zImage_X35</span>
    <span class="n">Linux</span><span class="k">-</span><span class="n">CommandLine</span> <span class="o">=</span> <span class="n">noinitrd</span>
    <span class="n">root</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">mtdblock3</span> <span class="n">init</span><span class="o">=/</span><span class="n">linuxrc</span> <span class="n">console</span><span class="o">=</span><span class="n">ttySAC0</span>
    <span class="n">Linux</span><span class="k">-</span><span class="n">RootFs</span><span class="k">-</span><span class="n">InstallImage</span> <span class="o">=</span><span class="n">Linux</span><span class="o">/</span><span class="n">rootfs_qtopia_qt4</span><span class="p">.</span><span class="n">img</span></code></pre></figure>

<ul>
  <li>Step2：将 SD卡插到开发板的 SD插槽上，将 S2 开关切换至 NOR一侧，然后上电开机，会听到“滴”一声开始烧写系统。</li>
  <li>Step3：系统烧写完成后，会发出滴滴的声音，串口会显示“OS ‘LINUX’ Installed”，将开发板 S2 开关设置为NAND一档，重新开机即可启动新的 Linux 系统。</li>
</ul>

<hr />
<h2 id="挂载步骤">挂载步骤</h2>
<ul>
  <li>PC上执行<code class="language-plaintext highlighter-rouge">sudo apt-get install nfs-common nfs-kernel-server portmap</code>安装NFS服务器</li>
  <li>安装完成后会在/etc目录下生成exports配置文件，它是用来设置PC允许NFS服务器分享的目录。同时可以通过命令控制NFS服务器状态。</li>
</ul>

<p>启动服务 ` sudo /etc/init.d/nfs-kernel-server start`</p>

<p>停止服务 ` sudo /etc/init.d/nfs-kernel-server stop`</p>

<p>重启服务 ` sudo /etc/init.d/nfs-kernel-server restart`</p>

<ul>
  <li>编辑exports文件，设置共享目录 <code class="language-plaintext highlighter-rouge">sudo vim /etc/exports</code>
添加以下一行：
<code class="language-plaintext highlighter-rouge">/opt/ARM2440 *(rw,sync,no_root_squash)</code>
/opt/ARM2440是PC上的共享目录，也就是ARM可以挂载在自己某个目录下的文件系统。</li>
  <li>在ARM对应的终端上执行挂载命令
<code class="language-plaintext highlighter-rouge">mount -t nfs -o nolock 202.201.13.205:/opt/ARM2440 /mnt</code>，其实202.201××是PC的公网IP地址</li>
  <li><code class="language-plaintext highlighter-rouge">[root@FriendlyARM /]# cd /mnt</code>，进入mnt目录即可看到PC上共享目录ARM2440下的文件。这样就可以直接在PC上修改和交叉编译源代码，在ARM上执行程序。</li>
</ul>
:ET