I"!<p>前面分析了Nginx的基本数据结构，现在看一下功能模块。</p>

<p>Nginx将各功能模块组成一条链，当有请求到达时，请求依次进过这条链上的部分或全部模块进行处理。</p>

<hr />

<h2 id="线程模型">线程模型</h2>

<p>Nginx使用一个多进程模型来提供服务，一个master进程和多个worker进程。类似的原理可以参见<a href="http://tuzhii.com/2015/03/05/DistributedProcess/">分布式进程</a>。框架如下：</p>

<p><img src="/assets/images/nginx-4-1.png" alt="图片" /></p>

<p>master分管多个work进程。每个worker执行死循环接收来自客户端的请求。死循环由<code class="language-plaintext highlighter-rouge">ngx_worker_process_cycle</code>实现。一个请求的简单处理流程如下：</p>

<ul>
  <li>操作系统提供的机制（例如epoll, kqueue等）产生相关的事件</li>
  <li>接收和处理这些事件，如是接受到数据，则产生更高层的request对象</li>
  <li>处理request的header和body</li>
  <li>产生响应，并发送回客户端</li>
  <li>完成request的处理</li>
  <li>重新初始化定时器及其他事件</li>
</ul>

<hr />

<h2 id="show-the-code">show the code</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static void
ngx_worker_process_cycle(ngx_cycle_t *cycle, void *data)
{
    ngx_int_t worker = (intptr_t) data;

    ngx_uint_t         i;
    ngx_connection_t  *c;

    ngx_process = NGX_PROCESS_WORKER;
    ngx_worker = worker;
    //设定n个worker进程
    ngx_worker_process_init(cycle, worker);
    ngx_setproctitle("worker process");

    for ( ;; ) {
        //如果进程退出，关闭所有连接
        if (ngx_exiting) {
            c = cycle-&gt;connections;
            for (i = 0; i &lt; cycle-&gt;connection_n; i++) {
                if (c[i].fd != -1 &amp;&amp; c[i].idle) {
                    c[i].close = 1;
                    c[i].read-&gt;handler(c[i].read);
                }
            }
            //定时器归0
            ngx_event_cancel_timers();
            //判断timer的红黑树是否为空
            if (ngx_event_timer_rbtree.root == ngx_event_timer_rbtree.sentinel) {
                ngx_worker_process_exit(cycle);
            }
        }

        ngx_process_events_and_timers(cycle);
        //处理中断信号
        if (ngx_terminate) {
            ngx_worker_process_exit(cycle);
        }
        //处理退出信号
        if (ngx_quit) {
            ngx_quit = 0;
            ngx_setproctitle("worker process is shutting down");
            if (!ngx_exiting) {
                ngx_close_listening_sockets(cycle);
                ngx_exiting = 1;
            }
        }
        //处理重启log
        if (ngx_reopen) {
            ngx_reopen = 0;
            ngx_reopen_files(cycle, -1);
        }
    }
}
</code></pre></div></div>

<p>其中几个关键函数是</p>

<p><code class="language-plaintext highlighter-rouge">ngx_worker_process_init</code> 处理子进程初始化</p>

<p><code class="language-plaintext highlighter-rouge">ngx_process_events_and_timers(cycle)</code></p>

<p><code class="language-plaintext highlighter-rouge">ngx_worker_process_exit(cycle)</code> 子进程退出</p>

<p>下面来看一下子进程的初始化操作：</p>

<ul>
  <li>全局性的设置，根据全局的配置信息设置执行环境、优先级、限制、setgid、setuid、信号初始化等</li>
  <li>调用所有模块的钩子init_process</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for (i = 0; ngx_modules[i]; i++) {
    if (ngx_modules[i]-&gt;init_process) {
        if (ngx_modules[i]-&gt;init_process(cycle) == NGX_ERROR{            exit(2);                
        }
    }
}
</code></pre></div></div>
<p>里面关键的函数是<code class="language-plaintext highlighter-rouge">init_process</code>。</p>

<ul>
  <li>关闭不使用的socket，关闭当前worker的channel[0]句柄和其他worker的channel[1]句柄，当前worker会使用其他worker的channel[0]句柄发送消息，使用当前worker的channel[1]句柄监听可读事件</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for (n = 0; n &lt; ngx_last_process; n++) {

    if (ngx_processes[n].pid == -1) {
        continue;
    }

    //跳过当前worker
    if (n == ngx_process_slot) {
        continue;
    }

    if (ngx_processes[n].channel[1] == -1) {
        continue;
    }
    //关闭其它workers channel[1]
    if (close(ngx_processes[n].channel[1]) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
                      "close() channel failed");
    }
}

//关闭当前worker channel[0]
if (close(ngx_processes[ngx_process_slot].channel[0]) == -1) {
    ngx_log_error(NGX_LOG_ALERT, cycle-&gt;log, ngx_errno,
                  "close() channel failed");
}
</code></pre></div></div>

<ul>
  <li>在当前worker的channel[1]句柄监听可读事件</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (ngx_add_channel_event(cycle, ngx_channel, NGX_READ_EVENT,ngx_channel_handler) == NGX_ERROR)
{
    exit(2);
}
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">ngx_add_channel_event</code>把句柄<code class="language-plaintext highlighter-rouge">ngx_channel</code>(当前worker的channel[1])上建立的连接的可读事件加入事件监控队列，事件处理函数为<code class="language-plaintext highlighter-rouge">ngx_channel_hanlder</code>。当有可读事件的时候，<code class="language-plaintext highlighter-rouge">ngx_channel_handler</code>负责处理消息，具体代码可以查看<code class="language-plaintext highlighter-rouge">src/os/unix/ngx_process_cycle.c</code>,过程如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static void
ngx_channel_handler(ngx_event_t *ev)
{
//...
for ( ;; ) {
    //从channe[1]读取消息
    n = ngx_read_channel(c-&gt;fd, &amp;ch, sizeof(ngx_channel_t), ev-&gt;log); 
    //处理消息命令
    switch (ch.command) {
        case NGX_CMD_QUIT:
            ngx_quit = 1;
            break;
        case NGX_CMD_TERMINATE:
            ngx_terminate = 1;
            break;
        case NGX_CMD_REOPEN:
            ngx_reopen = 1;
            break;
        case NGX_CMD_OPEN_CHANNEL:
            ngx_processes[ch.slot].pid = ch.pid;
            ngx_processes[ch.slot].channel[0] = ch.fd;
            break;
        case NGX_CMD_CLOSE_CHANNEL:
            if (close(ngx_processes[ch.slot].channel[0]) == -1) {
                ngx_log_error(NGX_LOG_ALERT, ev-&gt;log, ngx_errno,
                              "close() channel failed");
            }
            ngx_processes[ch.slot].channel[0] = -1;
            break;
        }
    }
}
</code></pre></div></div>
<hr />

<p>##参考</p>

<p><a href="http://blog.csdn.net/lengzijian/article/details/7591025">http://blog.csdn.net/lengzijian/article/details/7591025</a></p>
:ET