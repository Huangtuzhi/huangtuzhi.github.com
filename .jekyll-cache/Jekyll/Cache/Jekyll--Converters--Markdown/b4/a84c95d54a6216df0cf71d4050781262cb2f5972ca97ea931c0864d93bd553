I"иш<p>Х╕│Х©⌡Х║▄Х╞╜И÷ЁЕ╓└Г░├О╪▄Е▐╞Д╩╔Е─÷Е┼╘Е╥╡Г╩▐И⌡├Ф┬░Г └Е╥╔Е┘╥Е▄┘О╪▄Е╕┌MatlabД╦▀Г └voiceboxЦ─┌</p>

<p>Е°╗Matlab7И┤▄toolboxИ┤▄Ф╥╩Е┼═voiceboxЕ╥╔Е┘╥Е▄┘Ц─┌<a href="http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/voicebox.zip">Е╝≤Ф√╧Д╦▀Х╫╫Е°╟Е²─</a>О╪▄Е°╗commandИ┤▄Х╬⌠Е┘╔</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; addpath(genpath('E:\soft\Matlab\toolbox\voicebox'))  
&gt;&gt; savepath
</code></pre></div></div>

<p>Х╥╞Е╬└Е├≥Х┤╙Е╥╠PCИ┤▄voiceboxГ └Д╫█Г╫╝Ц─┌</p>

<hr />
<h2 id="mfccФ╣│Г╗▀">MFCCФ╣│Г╗▀</h2>
<p>MFCCФ≤╞Х©≥Ф═╥Г └Д╦─Д╦╙Ф╣│Г╗▀О╪ </p>

<p><img src="http://static.oschina.net/uploads/space/2014/0315/110755_dEaE_1420197.bmp" alt="Е°╗Ф╜╓Х╬⌠Е┘╔Е⌡╬Г┴┤Ф▐▐Х©╟" /></p>

<p>Д╦╩Х╕│Г └Ф╜╔И╙╓Ф°┴О╪ Е┬├Е╦╖Е┼═Г╙≈Ц─│FFTЦ─│Д╦┴Х╖▓Ф╩╓ФЁ╒Ц─┌</p>

<hr />
<h2 id="matlabЕ╝·Г▌╟Ф∙╟Ф█╝Х╞╩Е┘╔">MatlabЕ╝·Г▌╟Ф∙╟Ф█╝Х╞╩Е┘╔</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[x,fs,bits,opt_ck]=wavread('turan.wav',[1018 1400]');
</code></pre></div></div>

<p>xГ └Х©■Е⌡·Е─╪Ф≤╞Д╦─Д╦╙382*2Г └Ф∙╟Г╩└О╪▄Х╞╢Ф≤▌Ф≤╞Е╥╕Е▐ЁД╨▄И─ И│⌠Ц─┌Х╞╔Х╞╜Е▐╔Х╞╩Е▐√Ф√┤Д╩╤Е░█Д╦╨turan.wavГ └И÷ЁИ╒▒Ф√┤Д╩╤О╪▄Е╧╤Е╟├И÷ЁИ╒▒Ф∙╟Ф█╝Е╜≤Е┌╗Е°╗xД╦╜О╪▄Х©■Е⌡·Г╩≥Г■╗Ф┬╥Д╫©Г■╗Ц─┌И÷ЁИ╒▒Ф∙╟Ф█╝Г └Е─╪Е÷÷Д╦╨[-1,1]О╪▄Х╒╚Е╫▓Д╦─Е▄√Д╨├Ц─┌</p>

<p>Е°╗CИ┤▄И²╒Ф≤╞Ф┼┼Х╞╜И÷ЁФ∙╟Ф█╝Х╞╩Е┘╔Е┬╟Д╦─Д╦╙Д╦─Г╩╢Ф∙╟Г╩└О╪▄Е⌡═Ф╜╓Х╕│Х©⌡Х║▄Е╥╕Е▐ЁЕё╟И│⌠Ф∙╟Ф█╝Е┬├Г╕╩Ц─┌Х─▄MatlabД╦╜Д╧÷Д╦╨Д╨├Х╥÷Х╦╙Х╟┐Х╞∙Ф∙╟Ф█╝Ф█╒Ф┬░Е█∙Её╟И│⌠Ц─┌</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x=x(:,1); %Х▌╥Е▐√Е╥╕Её╟И│⌠Ф∙╟Ф█╝
</code></pre></div></div>

<hr />
<h2 id="cЕ╝·Г▌╟И╒└Е┼═И┤█">CЕ╝·Г▌╟И╒└Е┼═И┤█</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- lang: cpp --&gt;
void PreEmphasise (float *s, float k)
{
int i;
float preE;//Е┼═И┤█ГЁ╩Ф∙╟
preE = k;
for (i=ipframesize;i&gt;=2;i--)
   s[i] -= s[i-1]*preE;
s[1] *= 1.0-preE;
}
</code></pre></div></div>

<p>И╒└Е┼═И┤█Е°╗Ф≈╤Е÷÷Д╦┼Г └Ф╠┌ФЁ∙Е╬┬Е┐▐Е╥╝Е┬├О╪▄Е°╗И╒▒Е÷÷Д╦┼Х╣╥Д╦─Д╦╙И╚≤И─ Ф╩╓ФЁ╒Е≥╗Г └Д╫°Г■╗Ц─┌S2(n)=S(n)-a.S(n-1)Г └Д╪═И─▓Е┤╫Ф∙╟Х©⌡Х║▄ZЕ▐≤Ф█╒Е╟╠Ф≤╞H(z)=1-a.(Z^(-1))Ц─┌Г■╩Е┤╨Е╝┐Г └И╒▒Х╟╠Е⌡╬Е╟╠Е▐╞Д╩╔Г⌡╢Х╖┌Г°▀Е┤╨Х©≥Ф≤╞Д╦─Д╦╙И╚≤И─ Ф╩╓ФЁ╒Е≥╗О╪▄Е┼═Е╪╨Х╞╜И÷ЁД©║Е▐╥Г └Е┘╠Ф▄╞ЕЁ╟Ц─┌Е┘╥Д╫⌠Е┘ЁД╨▌ZЕ▐≤Ф█╒Г └Г÷╔Х╞├Е▐╞Д╩╔Е▐┌Е┼═Е╔╔Ф°╛Ф╣╥И╩≤Ц─┼Signals &amp; SystemsЦ─▀P534Ц─┌Е╕┌Ф·°Г°▀Д╦█Ф┤┌О╪▄Е╟╠Е▌╩Е│ Е┤═И│⌠Д©║Е▐╥Д╦▌ГЁ╩Г╩÷Д╧═И╒≤Е░╖Ц─┌</p>

<hr />
<h2 id="Е┬├Е╦╖Е┼═Г╙≈">Е┬├Е╦╖Е┼═Г╙≈</h2>
<p>Ф┬▒Д╩╛Ф┼┼Х╞╜И÷ЁД©║Е▐╥Г°▀Е│ Е╧ЁГ╗ЁГ └О╪▄Е╝·И≥┘Х╞╜И÷ЁД©║Е▐╥Е▐╞Х┐╫Е╬┬И∙©Ц─┌Д╦╨Д╨├Д╬©Д╨▌Е╓└Г░├Ф∙╢Д╦╙Д©║Е▐╥О╪▄Ф╞▐Ф╛║Е▐╙Е╓└Г░├Д╦─Е╟▐Ф╝╣О╪┬10ms~30msО╪┴Г └Ф∙╟Ф█╝Ц─┌Х©≥Е╟╠Ф≤╞Е┬├Е╦╖О╪▄Д╦╨Д╨├Д©²Х╞│Д©║Е▐╥Г └Х©·Г╩╜Ф─╖О╪▄Е╦╖Д╦▌Е╦╖Д╧▀И≈╢Ф°┴И┐╗Е┬├И┤█Е▐═Ц─┌</p>

<p>Х─▄Г⌡╢Ф▌╔Е╞╧Д©║Е▐╥Х©⌡Х║▄Ф┬╙Ф√╜О╪┬Е┼═Г÷╘Е╫╒Г╙≈О╪┴Д╪ Д╨╖Г■÷И╒▒Г▌┤ФЁ└И°╡О╪▄Д╦─Х┬╛И┐╫Ф≤╞Е┼═Ф╠┴Ф≤▌Г╙≈Ц─┌Ф╠┴Ф≤▌Г╙≈Е▓▄Ф╜ёЕ╪╕Е┤╫Ф∙╟Е╬┬Е┐▐О╪▄Г■╗MatlabЕ▒╫Д╩╓plot(hamming(100))Г╩≤Е┬╤Е┤╨Г └Е⌡╬Е┐▐Е╕┌Д╦▀О╪ </p>

<p><img src="http://static.oschina.net/uploads/space/2014/0317/111121_vDNc_1420197.bmp" alt="Е°╗Ф╜╓Х╬⌠Е┘╔Е⌡╬Г┴┤Ф▐▐Х©╟" /></p>

<hr />
<p>##FFTГ └Д╫°Г■╗#
FFTЕ°╗Д╦─Х┬╛Е╨■Г■╗Д╦╜Ф≤╞Г■╗Ф²╔Ф╩╓ФЁ╒Ц─┌Е┘┬Ф╜ёЕ▐≤Ф█╒Ф╩╓Ф▌┴Д╦─И┐╗Е┬├И╒▒Х╟╠Е┬├И┤▐О╪▄Е├█Д╫°И─├Е▐≤Ф█╒Ф┼┼Д©║Е▐╥Е▐≤Е⌡·Ф²╔Х╬╬Е┬╟Ф╩╓ФЁ╒Г └Г⌡╝Г └Ц─┌Д╫├Ф≤╞FFTХ©≤Ф°┴Е▐╕Е╓√Д╦─Д╦╙Д╫°Г■╗О╪▄Ф╞■Е╕┌Е°╗Х©≥Д╦╙Е╨■Г■╗Д╦╜Ф≤╞Е╞╧Ф╞▐Д╦─Е╦╖Х©⌡Х║▄FFTЕ▐≤Ф█╒О╪▄Ф╠┌И╒▒Х╟╠Х©⌡Х─▄Ф╠┌Е╬≈Е╧┘Е╨╕Х╟╠Ц─┌Ф╠┌Е╬≈Г └Е╧┘Е╨╕Х╟╠Г■╗Е°╗Е░▌И²╒Г └MelЕ╟╨Е╨╕Г └Д╦┴Х╖▓Е╫╒Ф╩╓ФЁ╒Е≥╗Г╩└Д╦╜Ц─┌</p>

<p>Х©≥Ф╛║Г°▀FFTГ╝≈ФЁ∙Г°÷Ф°┴Г╖█И┤█Ф╦╘Ф≈╖Ф╒╕Г └Ф└÷Х╖┴Ц─┌Е╞╧Д╩╔Е┴█Е╜╕Г └Д©║Е▐╥Д╦▌ГЁ╩Г╩÷Ц─│Ф∙╟Е╜≈Д©║Е▐╥Е╓└Г░├И┤█Ф√╟Е╝║Х╖├Д╨├Д╦─Д╦▀Ц─┌</p>

<hr />
<h2 id="Д╩ёГ═│Е╝·Г▌╟">Д╩ёГ═│Е╝·Г▌╟</h2>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdio&gt;
</span><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define PI 3.1415926
#define TPI 2*PI
#define PREEMCOEF 0.9375
#define N 256 //Х╬⌠Е┘╔Ф═╥Ф°╛Ф─╩Ф∙╟
#define M 8 //DFTХ©░Г╝≈Е╠┌Ф∙╟
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">_ExtractedFeature</span>
<span class="p">{</span>
<span class="kt">float</span> <span class="n">MFCC</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">zcr</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">En</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">EnProduct</span><span class="p">;</span>
<span class="p">}</span><span class="n">GetFeature</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">_TWavHeader</span> <span class="c1">//wavФ═╪Е╪▐И÷ЁИ╒▒Г └Ф√┤Д╩╤Е╓╢</span>
<span class="p">{</span>
        <span class="kt">int</span> <span class="n">rId</span><span class="p">;</span> <span class="c1">//Ф═┤Е©≈Г╛╕О╪┬RIFFО╪┴</span>
        <span class="kt">int</span> <span class="n">rLen</span><span class="p">;</span> <span class="c1">//Ф∙╟Ф█╝Е╓╖Е╟▐,Е▄┘Ф▀╛Ф∙╟Ф█╝Е╓╢Г └Е╓╖Е╟▐Е▓▄И÷ЁИ╒▒Ф√┤Д╩╤Г └Е╓╖Е╟▐</span>
        <span class="kt">int</span> <span class="n">wId</span><span class="p">;</span> <span class="c1">//Ф═╪Е╪▐Г╠╩Е·▀О╪┬"WAVE"О╪┴</span>
        <span class="kt">int</span> <span class="n">fId</span><span class="p">;</span> <span class="c1">//"fmt"</span>

        <span class="kt">int</span> <span class="n">fLen</span><span class="p">;</span> <span class="c1">//Sizeof(WAVEFORMATEX)</span>

        <span class="kt">short</span> <span class="n">wFormatTag</span><span class="p">;</span> <span class="c1">//Г╪√Г═│Ф═╪Е╪▐О╪▄Е▄┘Ф▀╛WAVE_FORMAT_PCMО╪▄WAVEFORMAT_ADPCMГ╜┴</span>
        <span class="kt">short</span> <span class="n">nChannels</span><span class="p">;</span> <span class="c1">//Её╟И│⌠Ф∙╟О╪▄Е█∙Её╟И│⌠Д╦╨1О╪▄Е▐▄Её╟И│⌠Д╦╨2</span>
        <span class="kt">int</span> <span class="n">nSamplesPerSec</span><span class="p">;</span> <span class="c1">//И┤┤Ф═╥И╒▒Г▌┤</span>
        <span class="kt">int</span> <span class="n">nAvgBytesPerSec</span><span class="p">;</span> <span class="c1">//Ф╞▐Г╖▓Г └Ф∙╟Ф█╝И┤▐</span>
        <span class="kt">short</span> <span class="n">nBlockAlign</span><span class="p">;</span> <span class="c1">//Е²≈Е╞╧И╫░</span>
        <span class="kt">short</span> <span class="n">wBitsPerSample</span><span class="p">;</span> <span class="c1">//WAVEФ√┤Д╩╤Г └И┤┤Ф═╥Е╓╖Е╟▐</span>
        <span class="kt">int</span> <span class="n">dId</span><span class="p">;</span> <span class="c1">//"data"</span>
        <span class="kt">int</span> <span class="n">wSampleLength</span><span class="p">;</span> <span class="c1">//И÷ЁИ╒▒Ф∙╟Ф█╝Г └Е╓╖Е╟▐</span>
<span class="p">}</span><span class="n">TWavHeader</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">PreEmphasise</span> <span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">double</span> <span class="n">k</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">GenHamWindow</span> <span class="p">(</span><span class="kt">int</span> <span class="n">frameSize</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">Ham</span> <span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">frameSize</span><span class="p">);</span>
<span class="kt">double</span> <span class="nf">MyFFT</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">double</span> <span class="o">*</span><span class="n">out</span><span class="p">);</span> <span class="c1">//Х©■Е⌡·Х┐╫И┤▐Е─╪En</span>
<span class="kt">void</span> <span class="nf">TrigFilter</span><span class="p">(</span><span class="kt">double</span><span class="o">*</span> <span class="k">in</span><span class="p">,</span><span class="kt">double</span><span class="o">*</span> <span class="n">out</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">Bank</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="k">in</span><span class="p">,</span><span class="kt">double</span> <span class="o">*</span><span class="n">out</span><span class="p">);</span><span class="c1">//Х▌╥Е▐√12Д╦╙MFCCГЁ╩Ф∙╟</span>
<span class="kt">int</span> <span class="nf">GetZCR</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span> <span class="k">in</span><span class="p">,</span><span class="kt">int</span> <span class="n">len</span><span class="p">);</span> <span class="c1">//Х▌╥Е▐√Х©┤И⌡╤Г▌┤</span>

<span class="kt">int</span> <span class="n">ipframesize</span><span class="o">=</span><span class="mi">256</span><span class="p">;</span> <span class="c1">//Е╝ Д╧┴Е╦╖Г └И∙©Е╨╕</span>
<span class="kt">double</span> <span class="n">hamWin</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
<span class="kt">double</span> <span class="n">Value</span><span class="p">[</span><span class="nf">N</span><span class="p">];</span><span class="c1">//FFTГ╝≈ФЁ∙Х╬⌠Е┤╨Г └Е╧┘Е╨╕Х╟╠</span>
<span class="kt">double</span> <span class="n">En</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
 <span class="n">TWavHeader</span> <span class="n">waveheader</span><span class="p">;</span>
 <span class="kt">FILE</span> <span class="o">*</span><span class="n">sourcefile</span><span class="p">;</span>
 <span class="n">ofstream</span> <span class="n">outfile</span><span class="p">(</span><span class="s">"1.txt"</span><span class="p">);</span>
 <span class="n">sourcefile</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="s">"1.wav"</span><span class="p">,</span><span class="s">"rb"</span><span class="p">);</span>
 <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">waveheader</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">_TWavHeader</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="n">sourcefile</span><span class="p">);</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">waveheader</span><span class="p">.</span><span class="n">nChannels</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">waveheader</span><span class="p">.</span><span class="n">wBitsPerSample</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">waveheader</span><span class="p">.</span><span class="n">nSamplesPerSec</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">_TWavHeader</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
 
 <span class="kt">short</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
 <span class="kt">double</span> <span class="n">singledata</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
 <span class="kt">double</span> <span class="n">FFTCoff</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
 <span class="kt">double</span> <span class="n">TrigCoff</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
 <span class="kt">double</span> <span class="n">BankCoff</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
 <span class="kt">int</span> <span class="n">zcr</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">energe</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">enproduct</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">flag</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
 <span class="k">while</span><span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">fread</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">short</span><span class="p">),</span><span class="n">ipframesize</span><span class="p">,</span><span class="n">sourcefile</span><span class="p">)</span><span class="o">==</span><span class="n">ipframesize</span><span class="p">)</span>
 <span class="c1">//Г╜┴Е╬┘Ф∙╟Ф█╝Х╞╩Е╝▄Д╦─Е┘╠Х╞╩256Д╦╙Е╜≈Х┼┌Ц─┌Ф√┤Д╩╤Ф▄┤И▓┬Г╖╩Е┼╗О╪▄Е┬╟Д╨├Ф∙╟Ф█╝Е▄╨Ц─┌</span>
 <span class="p">{</span> <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ipframesize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="c1">//singledata[i]=(3.0518/100000)*buffer[i];</span>
<span class="n">singledata</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="n">buffer</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"Data Index %d:%lf</span><span class="se">\r\n</span><span class="s">"</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">singledata</span><span class="p">[</span><span class="nf">i</span><span class="p">]);</span>
<span class="p">}</span>


<span class="n">PreEmphasise</span> <span class="p">(</span><span class="n">singledata</span><span class="p">,</span> <span class="n">PREEMCOEF</span><span class="p">);</span>
<span class="n">Ham</span> <span class="p">(</span><span class="n">singledata</span><span class="p">,</span> <span class="n">ipframesize</span><span class="p">);</span><span class="c1">//Е┼═Ф╠┴Ф≤▌Г╙≈</span>
<span class="n">energe</span><span class="o">=</span><span class="n">MyFFT</span><span class="p">(</span><span class="n">singledata</span><span class="p">,</span><span class="n">FFTCoff</span><span class="p">);</span>
<span class="n">TrigFilter</span><span class="p">(</span><span class="n">FFTCoff</span><span class="p">,</span><span class="n">TrigCoff</span><span class="p">);</span>
<span class="n">Bank</span><span class="p">(</span><span class="n">TrigCoff</span><span class="p">,</span><span class="n">BankCoff</span><span class="p">);</span>
<span class="n">zcr</span><span class="o">=</span><span class="n">GetZCR</span><span class="p">(</span><span class="n">singledata</span><span class="p">,</span><span class="n">ipframesize</span><span class="p">);</span>
<span class="n">enproduct</span><span class="o">=</span><span class="n">zcr</span><span class="o">*</span><span class="n">energe</span><span class="p">;</span>
<span class="n">fseek</span><span class="p">(</span><span class="n">sourcefile</span><span class="p">,</span><span class="o">-</span><span class="mi">256</span><span class="p">,</span><span class="n">SEEK_CUR</span><span class="p">);</span><span class="c1">//Ф√┤Д╩╤Ф▄┤И▓┬Е⌡·Ф╨╞</span>

<span class="n">GetFeature</span> <span class="n">Features</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">Features</span><span class="p">.</span><span class="n">MFCC</span><span class="p">[</span><span class="nf">j</span><span class="p">]</span><span class="o">=</span><span class="n">BankCoff</span><span class="p">[</span><span class="nf">j</span><span class="p">];</span>
<span class="p">}</span>
<span class="n">Features</span><span class="p">.</span><span class="n">En</span><span class="o">=</span><span class="n">energe</span><span class="p">;</span>
<span class="n">Features</span><span class="p">.</span><span class="n">zcr</span><span class="o">=</span><span class="n">zcr</span><span class="p">;</span>
<span class="n">Features</span><span class="p">.</span><span class="n">EnProduct</span><span class="o">=</span><span class="n">enproduct</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"bankcoff %f </span><span class="se">\r\n</span><span class="s"> "</span><span class="p">,</span><span class="n">Features</span><span class="p">.</span><span class="n">MFCC</span><span class="p">[</span><span class="nf">j</span><span class="p">]);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\r\n</span><span class="s">"</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"zcr %d</span><span class="se">\r\n</span><span class="s">"</span><span class="p">,</span><span class="n">zcr</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"Energe %f</span><span class="se">\r\n</span><span class="s">"</span><span class="p">,</span><span class="n">energe</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"EnProduct %f </span><span class="se">\r\n</span><span class="s">"</span><span class="p">,</span><span class="n">enproduct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"-------------------------------</span><span class="se">\r\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">PreEmphasise</span> <span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">double</span> <span class="n">k</span><span class="p">)</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
   <span class="kt">float</span> <span class="n">preE</span><span class="p">;</span><span class="c1">//Е┼═И┤█ГЁ╩Ф∙╟</span>
   
   <span class="n">preE</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
   <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">ipframesize</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
      <span class="n">s</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">preE</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* GenHamWindow: generate precomputed Hamming window function */</span>
 <span class="kt">void</span> <span class="nf">GenHamWindow</span> <span class="p">(</span><span class="kt">int</span> <span class="n">frameSize</span><span class="p">)</span><span class="c1">//Ф╠┴Ф≤▌Г╙≈Е┤╫Ф∙╟Ц─┌ГЁ╩Ф∙╟Е▐√0.46Ц─┌</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
   <span class="kt">float</span> <span class="n">a</span><span class="p">;</span>
   <span class="n">a</span> <span class="o">=</span> <span class="n">TPI</span> <span class="o">/</span> <span class="p">(</span><span class="n">frameSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
   <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">frameSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="n">hamWin</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">54</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">46</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">//Ham: Apply Hamming Window to Speech frame s</span>
<span class="kt">void</span> <span class="nf">Ham</span> <span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">frameSize</span><span class="p">)</span>
<span class="p">{</span>

   <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
   <span class="n">GenHamWindow</span><span class="p">(</span><span class="n">frameSize</span><span class="p">);</span>
   <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">8000</span><span class="p">;</span><span class="c1">//S[0]Х╣▀Д╦─Д╦╙Е┬²Е─╪</span>
   <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">frameSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="n">s</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">hamWin</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">double</span> <span class="nf">MyFFT</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">double</span> <span class="o">*</span><span class="n">out</span><span class="p">)</span>
<span class="p">{</span>
<span class="kt">float</span> <span class="n">local_en</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//Е╝ Д╧┴Х┐╫И┤▐Г └Е╠─И┐╗Е▐≤И┤▐</span>

    <span class="kt">float</span> <span class="n">x_i</span><span class="p">[</span><span class="nf">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">float</span> <span class="n">x_r</span><span class="p">[</span><span class="nf">N</span><span class="p">];</span>
<span class="c1">//bulk1</span>
    <span class="kt">int</span> <span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">bit_rev</span><span class="p">[</span> <span class="nf">N</span> <span class="p">];</span>
    <span class="kt">float</span> <span class="n">xx_r</span><span class="p">[</span> <span class="nf">N</span> <span class="p">];</span>
    
    <span class="c1">//bulk2</span>
    <span class="kt">int</span> <span class="n">cur_layer</span><span class="p">,</span> <span class="n">gr_num</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>	<span class="c1">//cur_layerД╩ёХ║╗Ф╜ёХ╕│Х╝║Г╝≈Г └Е╫⌠Е┴█Е╠┌О╪▄gr_numД╩ёХ║╗Е╫⌠Е┴█Е╠┌Г └И╒≈Г╡▓Ф∙╟</span>
    <span class="kt">float</span> <span class="n">tmp_real</span><span class="p">,</span> <span class="n">tmp_imag</span><span class="p">,</span> <span class="n">temp</span><span class="p">;</span> <span class="c1">// Д╦╢Ф≈╤Е▐≤И┤▐, Х╝╟Е╫∙Е╝·И┐╗</span>
    <span class="kt">float</span> <span class="n">tw1</span><span class="p">,</span> <span class="n">tw2</span><span class="p">;</span><span class="c1">// Ф≈▀Х╫╛Е⌡═Е╜░,tw1Д╦╨Ф≈▀Х╫╛Е⌡═Е╜░Г └Е╝·И┐╗cosИ┐╗Е┬├, tw2Д╦╨Ф≈▀Х╫╛Е⌡═Е╜░Г └Х≥ И┐╗sinИ┐╗Е┬├.</span>
    <span class="kt">int</span> <span class="n">step</span><span class="p">;</span> <span class="c1">// Ф╜╔Х©⌡</span>
    <span class="kt">int</span> <span class="n">sample_num</span><span class="p">;</span> <span class="c1">// И╒≈Г╡▓Г └Ф═╥Ф°╛Ф─╩Ф∙╟(Е░└Е╠┌Д╦█Е░▄, Е⌡═Д╦╨Е░└Е╠┌И╒≈Г╡▓Г └Х╬⌠Е┘╔Д╦█Е░▄)</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">x_r</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="p">;</span> <span class="c1">//Х╬⌠Е┘╔Ф∙╟Ф█╝О╪▄Ф╜╓Е╓└Х╝╬Д╦╨256</span>
 
    <span class="c1">//bulk1</span>
    <span class="n">bit_rev</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="p">)</span>
    <span class="p">{</span>
       <span class="k">for</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span><span class="o">++</span><span class="p">)</span>
       <span class="p">{</span>
           <span class="n">bit_rev</span><span class="p">[</span> <span class="nf">q</span> <span class="p">]</span> <span class="o">=</span> <span class="n">bit_rev</span><span class="p">[</span> <span class="nf">q</span> <span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
           <span class="n">bit_rev</span><span class="p">[</span> <span class="n">q</span> <span class="o">+</span> <span class="nf">p</span> <span class="p">]</span> <span class="o">=</span> <span class="n">bit_rev</span><span class="p">[</span> <span class="nf">q</span> <span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="n">p</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="n">xx_r</span><span class="p">[</span> <span class="nf">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">x_r</span><span class="p">[</span> <span class="nf">i</span> <span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="n">x_r</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">xx_r</span><span class="p">[</span> <span class="n">bit_rev</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span> <span class="p">];</span>
   
     <span class="c1">//bulk2</span>
    <span class="cm">/* Е╞╧Е╠┌Е╬╙Г▌╞ */</span>
    <span class="k">for</span><span class="p">(</span><span class="n">cur_layer</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">cur_layer</span><span class="o">&lt;=</span><span class="n">M</span><span class="p">;</span> <span class="n">cur_layer</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="cm">/* Ф╠┌Е╫⌠Е┴█Е╠┌Ф▀╔Ф°┴Е╓ Е╟▒Д╦╙И╒≈Г╡▓(gr_num) */</span>
       <span class="n">gr_num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
       <span class="n">i</span> <span class="o">=</span> <span class="n">M</span> <span class="o">-</span> <span class="n">cur_layer</span><span class="p">;</span>
       <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
       <span class="p">{</span>
           <span class="n">i</span><span class="o">--</span><span class="p">;</span>
           <span class="n">gr_num</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="cm">/* Ф╞▐Д╦╙И╒≈Г╡▓Г └Х╬⌠Е┘╔Ф═╥Ф°╛Ф∙╟N' */</span>
       <span class="n">sample_num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">cur_layer</span><span class="p">);</span>
       <span class="cm">/* Ф╜╔Х©⌡. Ф╜╔Х©⌡Ф≤╞N'/2 */</span>
       <span class="n">step</span> <span class="o">=</span> <span class="n">sample_num</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
       <span class="cm">/* */</span>
       <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
       <span class="cm">/* Е╞╧И╒≈Г╡▓Х©⌡Х║▄Е╬╙Г▌╞ */</span>
       <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">gr_num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
       <span class="p">{</span><span class="c1">// Е╞╧Ф═╥Ф°╛Г┌╧Х©⌡Х║▄Е╬╙Г▌╞, ФЁ╗Ф└▐Д╦┼И≥░Е▓▄Ф╜╔Х©⌡</span>
            <span class="k">for</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">p</span><span class="o">&lt;</span><span class="n">sample_num</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
           <span class="p">{</span>
              <span class="c1">// Ф≈▀Х╫╛Е⌡═Е╜░, И°─Х╕│Д╪≤Е▄√...</span>
              <span class="n">tw1</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="o">*</span><span class="n">p</span><span class="o">/</span><span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">cur_layer</span><span class="p">));</span>
              <span class="n">tw2</span> <span class="o">=</span> <span class="o">-</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="o">*</span><span class="n">p</span><span class="o">/</span><span class="n">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">cur_layer</span><span class="p">));</span>
              <span class="n">tmp_real</span> <span class="o">=</span> <span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="nf">p</span><span class="p">];</span>
              <span class="n">tmp_imag</span> <span class="o">=</span> <span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="nf">p</span><span class="p">];</span>
              <span class="n">temp</span> <span class="o">=</span> <span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">];</span>
              <span class="cm">/* Х²╤Е╫╒Г╝≈ФЁ∙ */</span>
              <span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="nf">p</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_real</span> <span class="o">+</span> <span class="p">(</span> <span class="n">tw1</span><span class="o">*</span><span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="o">-</span> <span class="n">tw2</span><span class="o">*</span><span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="p">);</span>
              <span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="nf">p</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_imag</span> <span class="o">+</span> <span class="p">(</span> <span class="n">tw2</span><span class="o">*</span><span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="o">+</span> <span class="n">tw1</span><span class="o">*</span><span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="p">);</span>
              <span class="n">x_r</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_real</span> <span class="o">-</span> <span class="p">(</span> <span class="n">tw1</span><span class="o">*</span> <span class="n">temp</span> <span class="o">-</span> <span class="n">tw2</span><span class="o">*</span><span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="p">);</span>
              <span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_imag</span> <span class="o">-</span> <span class="p">(</span> <span class="n">tw2</span><span class="o">*</span> <span class="n">temp</span> <span class="o">+</span> <span class="n">tw1</span><span class="o">*</span><span class="n">x_i</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="n">p</span><span class="o">+</span><span class="nf">step</span><span class="p">]</span> <span class="p">);</span>
              
           <span class="p">}</span>
           <span class="cm">/* Е╪─Х╥Ё!:) */</span>
           <span class="n">k</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">*</span><span class="n">step</span><span class="p">;</span>
       <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">//Д╪═Е┤╨Х╬⌠Е┤╨Г╩⌠Ф·°</span>
<span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="n">x_r</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">*</span><span class="n">x_r</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">+</span><span class="n">x_i</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">*</span><span class="n">x_i</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="n">local_en</span><span class="o">+=</span><span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">*</span><span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="k">return</span> <span class="n">local_en</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">TrigFilter</span><span class="p">(</span><span class="kt">double</span><span class="o">*</span> <span class="k">in</span><span class="p">,</span><span class="kt">double</span><span class="o">*</span> <span class="n">out</span><span class="p">)</span><span class="c1">//Х╝║Г╝≈Д╦┴Х╖▓Ф╩╓ФЁ╒ГЁ╩Ф∙╟</span>
<span class="p">{</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">var</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">channel</span><span class="p">,</span><span class="n">pot</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">Fres</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span><span class="c1">//24Д╦╙И─ </span>
<span class="kt">float</span> <span class="n">F</span><span class="p">[</span><span class="mi">24</span><span class="p">][</span><span class="mi">256</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">float</span> <span class="n">fh</span><span class="o">=</span><span class="mi">4000</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">melf</span><span class="o">=</span><span class="mi">2595</span><span class="o">*</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">fh</span><span class="o">/</span><span class="mi">700</span><span class="p">);</span>

<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">26</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">Fres</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="mi">700</span><span class="o">*</span><span class="p">(</span><span class="n">exp</span><span class="p">((</span><span class="n">melf</span><span class="o">/</span><span class="mi">2595</span><span class="p">)</span><span class="o">*</span><span class="n">i</span><span class="o">/</span><span class="mi">25</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="n">channel</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">channel</span><span class="o">&lt;</span><span class="mi">24</span><span class="p">;</span><span class="n">channel</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">for</span><span class="p">(</span><span class="n">pot</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">pot</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span><span class="n">pot</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">var</span><span class="o">=</span><span class="n">fh</span><span class="o">*</span><span class="p">(</span><span class="n">pot</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">256</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">Fres</span><span class="p">[</span><span class="nf">channel</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">var</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">var</span><span class="o">&lt;=</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">)</span>
<span class="n">F</span><span class="p">[</span><span class="nf">channel</span><span class="p">][</span><span class="nf">pot</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">var</span><span class="o">-</span><span class="n">Fres</span><span class="p">[</span><span class="nf">channel</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">Fres</span><span class="p">[</span><span class="nf">channel</span><span class="p">]);</span>
<span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">var</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">var</span><span class="o">&lt;=</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="p">)</span>
                <span class="n">F</span><span class="p">[</span><span class="nf">channel</span><span class="p">][</span><span class="nf">pot</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="n">var</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> \
                <span class="o">-</span><span class="n">Fres</span><span class="p">[</span><span class="n">channel</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
            <span class="k">else</span> <span class="n">F</span><span class="p">[</span><span class="nf">channel</span><span class="p">][</span><span class="nf">pot</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="n">channel</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">channel</span><span class="o">&lt;</span><span class="mi">24</span><span class="p">;</span><span class="n">channel</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">out</span><span class="p">[</span><span class="nf">channel</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//Е┘┬Х©⌡Х║▄Е┬²Е╖▀Е▄√О╪▄Г└╤Е░▌Х╝║Ф∙╟</span>
<span class="k">for</span><span class="p">(</span><span class="n">pot</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">pot</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span><span class="n">pot</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">out</span><span class="p">[</span><span class="nf">channel</span><span class="p">]</span><span class="o">+=</span><span class="k">in</span><span class="p">[</span><span class="nf">pot</span><span class="p">]</span><span class="o">*</span><span class="n">F</span><span class="p">[</span><span class="nf">channel</span><span class="p">][</span><span class="nf">pot</span><span class="p">];</span>
<span class="p">}</span>
   <span class="n">out</span><span class="p">[</span><span class="nf">channel</span><span class="p">]</span><span class="o">=</span><span class="n">log</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="nf">channel</span><span class="p">]);</span>
<span class="p">}</span>

<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Bank</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="k">in</span><span class="p">,</span><span class="kt">double</span> <span class="o">*</span><span class="n">out</span><span class="p">)</span>
<span class="p">{</span>
<span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">dctcoef</span><span class="p">[</span><span class="mi">12</span><span class="p">][</span><span class="mi">24</span><span class="p">];</span>
<span class="kt">float</span> <span class="n">win</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>
<span class="kt">float</span> <span class="n">Wmax</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">24</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">dctcoef</span><span class="p">[</span><span class="nf">i</span><span class="p">][</span><span class="nf">j</span><span class="p">]</span><span class="o">=</span><span class="n">cos</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">PI</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="mi">24</span><span class="p">));</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="n">sin</span><span class="p">((</span><span class="kt">float</span><span class="p">)(</span><span class="n">PI</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">12</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">Wmax</span><span class="p">)</span>
<span class="n">Wmax</span><span class="o">=</span><span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="p">}</span>
    
<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">/</span><span class="n">Wmax</span><span class="p">;</span><span class="c1">//Е╫▓Д╦─Е▄√</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">24</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">+=</span><span class="n">dctcoef</span><span class="p">[</span><span class="nf">i</span><span class="p">][</span><span class="nf">j</span><span class="p">]</span><span class="o">*</span><span class="k">in</span><span class="p">[</span><span class="nf">j</span><span class="p">];</span>
<span class="p">}</span>
<span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">=</span><span class="n">out</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">*</span><span class="n">win</span><span class="p">[</span><span class="nf">i</span><span class="p">];</span>
<span class="p">}</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">GetZCR</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span> <span class="k">in</span><span class="p">,</span><span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="c1">//Х©┤И⌡╤Г▌┤Г╝≈ФЁ∙Е╨■Х╞╔Е▓▄MatlabД╦─Ф═╥О╪▄Е⌡═Д╦╨Ф≤╞Г■╗Е╝┐Г └Ф∙╟Ф█╝Х©⌡Х╝╜Г╩┐Г └</span>
<span class="p">{</span>
<span class="kt">int</span> <span class="n">zcr</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">delta</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mo">02</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
<span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="k">in</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">*</span><span class="k">in</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="k">in</span><span class="p">[</span><span class="nf">i</span><span class="p">]</span><span class="o">-</span><span class="k">in</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">&gt;</span><span class="n">delta</span><span class="p">)</span> <span class="p">)</span>
<span class="n">zcr</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">return</span> <span class="n">zcr</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />
<h2 id="refrence">Refrence</h2>

<p>[1].http://my.oschina.net/jamesju/blog/193343</p>

<p>[2].http://hi.baidu.com/sunsee/item/1d669014316d9fdcbe90426c</p>

<p>[3].http://blog.csdn.net/xiaoding133/article/details/8106672</p>

:ET