I"}<p>Nginx具有一系列的模块，包括HTTP模块，核心模块和mail模块等。简要分析一下一些具有代表性模块的原理。</p>

<hr />

<h2 id="event模块">event模块</h2>
<p>event模块的主要功能是监听accept后建立的连接，对读写事件进行添加删除。事件处理模型和Nginx的<strong>非阻塞IO</strong>模型结合在一起使用。当IO可读可写的时候，相应的读写时间就会被唤醒，此时就会去处理事件的回调函数。</p>

<p>对于Linux，Nginx使用的是<code class="language-plaintext highlighter-rouge">epoll</code>。<code class="language-plaintext highlighter-rouge">epoll</code>是<code class="language-plaintext highlighter-rouge">pool</code>和<code class="language-plaintext highlighter-rouge">select</code>的增强版本。</p>

<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符(<code class="language-plaintext highlighter-rouge">fd</code>)，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是<strong>同步I/O</strong>，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是<strong>阻塞</strong>的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>

<p>所以epoll本质是<strong>同步IO</strong> + <strong>阻塞</strong>的(其实从其它角度看也可以算非阻塞，因为不是所有的数据到达后才返回)。</p>

<p>select模型的调用流程如下：</p>

<p><img src="/assets/images/nginx-6-1.png" alt="" /></p>

<p>epoll对select模型和poll模型有诸多改进。主要改进就是引入<code class="language-plaintext highlighter-rouge">notify机制</code>和<code class="language-plaintext highlighter-rouge">mmap机制</code>。</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mmap</code>将内核空间的一段内存区域映射到进程内存中，相当于内核空间和用户空间共享内存。当epoll回调上层的callback函数来处理socket数据时, 数据已经从内核层自动映射到了用户空间。</p>
  </li>
  <li>
    <p>select用<code class="language-plaintext highlighter-rouge">O(n)</code>的效率不断地去查看那些fd，效率太低。而epoll通过在内核中提供callback机制的方式，在内部使用链表把<code class="language-plaintext highlighter-rouge">O(n)</code>降到了<code class="language-plaintext highlighter-rouge">O(1)</code>，讨论参见<a href="http://stackoverflow.com/questions/6474602/does-epoll-do-its-job-in-o1">SO</a>。</p>
  </li>
</ul>

<p>我们看看怎么实现callback机制的。</p>

<p><img src="/assets/images/nginx-6-2.png" alt="" /></p>

<p>当为一个用户建立一个socket连接时，调用epoll的current进程会加入到驱动的<code class="language-plaintext highlighter-rouge">wait_queue</code>中。当其它用户连接时，进行同样的处理。所以current进程在所有驱动的等待队列中。</p>

<p>当IO没有就绪，调用<code class="language-plaintext highlighter-rouge">read</code>函数会阻塞在这一步。一旦只要有一个用户连接的IO就绪，current进程就会被唤醒。</p>

<p>与select相比，epoll加入了callback这个hock，记录了这个唤醒者，避免了在current进程醒着的时候查询到底是谁唤醒了我。</p>

<hr />

<p>##timer模块
先看一段代码，timer什么时候起作用。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void Request::run()
{
    keep_alive_timer = new QTimer();
    if (s_keep_alive_enable)
    {
        keep_alive = s_keep_alive_default;
        keep_alive_timeout = s_keep_alive_timeout * 1000;// the wait time
        connect(keep_alive_timer,SIGNAL(timeout()),this,SLOT(onTimeout()));
        keep_alive_timer-&gt;setSingleShot(true);
        keep_alive_timer-&gt;setInterval(keep_alive_timeout);
        keep_alive_timer-&gt;start();
    }
    //a new thread
    socket = new QTcpSocket();
    if (!socket-&gt;setSocketDescriptor(socketDescriptor))
        return;
    connect(socket, SIGNAL(readyRead()), this, \
    SLOT(onReadyRead()), Qt::DirectConnection);
    connect(socket, SIGNAL(disconnected()), this, \
    SLOT(onDisconnected()), Qt::DirectConnection);
    exec();
}
</code></pre></div></div>

<p>代码出自一个简单的<a href="https://github.com/Huangtuzhi/Tinyhttpd/blob/master/request.cpp">http服务器</a>。它新建了一个定时器，然后计算自连接开始后的时间。主要用来判断连接是否timeout。</p>

<p>Nginx使用红黑树来构造定时器。定时器的机制就是，二叉树的值是其超时时间，每次查找二叉树的最小值，如果最小值已经过期，就删除该节点，然后继续查找，直到所有超时节点都被删除。我们知道，自平衡二叉搜索树rbtree的树节点中，最左边叶子节点(或根节点)所代表的那个定时器的超时时间是最小的，因此只需要<code class="language-plaintext highlighter-rouge">O(1)</code>时间删除它就可以。</p>

<p><img src="/assets/images/nginx-6-3.png" alt="" /></p>

<hr />

<p>##参考</p>

<p><a href="http://www.cnblogs.com/Anker/p/3265058.html">http://www.cnblogs.com/Anker/p/3265058.html</a></p>

<p><a href="http://www.cnblogs.com/Anker/p/3254269.html">http://www.cnblogs.com/Anker/p/3254269.html</a></p>

<p><a href="http://www.pento.cn/pin/31146170">http://www.pento.cn/pin/31146170</a></p>

<p><a href="http://blog.csdn.net/ce123_zhouwei/article/details/8459730">http://blog.csdn.net/ce123_zhouwei/article/details/8459730</a></p>

<p><a href="http://blog.csdn.net/v_july_v/article/details/6105630">http://blog.csdn.net/v_july_v/article/details/6105630</a></p>

<p><a href="http://rango.swoole.com/archives/381">http://rango.swoole.com/archives/381</a></p>

<p><a href="http://www.smithfox.com/?e=191">http://www.smithfox.com/?e=191</a></p>

<p><a href="http://nieyong.github.io/wiki_cpu/mmap%E8%AF%A6%E8%A7%A3.html">http://nieyong.github.io/wiki_cpu/mmap%E8%AF%A6%E8%A7%A3.html</a></p>
:ET